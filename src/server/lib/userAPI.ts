import { NextApiRequest, NextApiResponse } from 'next';

import validator from 'validator';
import { v4 as uuidv4 } from 'uuid';

import { UserModel } from '@/server/models/UserModel';
import statusCodes from '@/shared/constants/httpStatusCodes';
import connectMongo from '@/server/service/mongo';

export const createUserWithAutoId = async (email: string) => {
  // Logic to create a new user with an autogenerated ID
  return UserModel.create({ _id: uuidv4(), email });
};

// Define separate email validation middleware
export const emailValidator = async (
  req: NextApiRequest,
  res: NextApiResponse,
  next: Function
) => {
  const { email: emailBody } = req.body;
  const { email: emailQuery } = req.query;

  const isItInTheBody =
    typeof emailBody !== 'string' || !validator.isEmail(emailBody);
  const isItInQuery =
    typeof emailQuery !== 'string' || !validator.isEmail(emailQuery);

  if (isItInTheBody || isItInQuery) {
    return res.status(statusCodes.NOT_ACCEPTABLE).json({
      message: 'Email is invalid',
    });
  } else {
    await connectMongo();
    next();
  }
};